{"version":3,"sources":["components/Navbar/Navbar.js","containers/HomeScreen/HomeScreen.js","store/actionTypes.js","store/actions.js","components/InputSearch/InputSearch.js","components/WeatherIcon/WeatherIcon.js","components/TempDeck/TempDeck.js","containers/WeatherScreen/WeatherScreen.js","components/Card/Card.js","utills/Pagination.js","containers/FavoriteScreen/FavoriteScreen.js","App.js","store/reducer.js","index.js"],"names":["Navbar","renderRoutes","id","nav","path","map","route","to","exact","activeClassName","className","type","onChange","event","target","checked","document","body","HomeScreen","motion","div","exit","animate","initial","variants","in","opacity","x","out","SEARCH_RESULTS","GET_WEATHER","GET_WEEK_WEATHER","ADD_TO_FAVORITES","REMOVE_FROM_FAVORITES","SET_MESSAGE","REDIRECT","API","getCityWeather","key","country","city","dispatch","a","axios","get","response","results","data","Math","random","text","WeatherText","temp","Temperature","Imperial","Value","datetime","Date","LocalObservationDateTime","payload","message","getFiveDaysWeather","InputSearch","props","useState","searchState","setSearchState","useSelector","state","inputResults","useDispatch","onSubmit","preventDefault","i","push","value","placeholder","length","result","onClick","onWeather","Key","Country","LocalizedName","WeatherIcon","icon","TempDeck","weekForecasts","DailyForecasts","forcast","date","toLocaleDateString","Minimum","Maximum","WeatherScreen","weatherData","curWeather","messageData","isRedirect","useEffect","successCb","position","coords","latitude","longitude","TimeZone","Name","Region","errorCb","error","console","log","navigator","geolocation","getCurrentPosition","toLocaleTimeString","toDateString","getState","current","isExist","favorites","find","element","withRouter","searchKey","history","desc","stopPropagation","Pagination","pageNumbers","ceil","totalForecasts","forecastPerPage","page","paginate","changePage","FavoriteScreen","curPage","setCurPage","indexOfLastForecast","indexOfFirstForecast","currentForecasts","slice","favorite","App","component","initState","reducer","action","filter","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunk","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.eaf89293.chunk.js","sourcesContent":["import React, { Fragment } from 'react';\r\nimport { NavLink } from 'react-router-dom';\r\n\r\nimport './Navbar.css';\r\n\r\nconst Navbar = () => {\r\n    const routes = [\r\n        {\r\n            id: 1,\r\n            nav: 'home',\r\n            path: '/'\r\n        },\r\n        {\r\n            id: 2,\r\n            nav: 'weather',\r\n            path: '/weather'\r\n        },\r\n        {\r\n            id: 3,\r\n            nav: 'favorite',\r\n            path: '/favorite'\r\n        }\r\n    ];\r\n    const renderRoutes = routes.map(route => {\r\n        return (\r\n            <li key={route.id}>\r\n                <NavLink to={`${route.path}`} exact activeClassName={'active'}>\r\n                    {route.nav === 'home' && <i className=\"fas fa-home\"></i>}\r\n                    {route.nav}\r\n                </NavLink>\r\n            </li>\r\n        )\r\n    })\r\n\r\n    // Light-Mode:\r\n    const lightMode = event => {\r\n        if (event.target.checked) {\r\n            return document.body.className = 'light-mode';\r\n        }\r\n        document.body.className = '';\r\n    }\r\n\r\n    return (\r\n        <nav>\r\n            <div className={'navbar-main'}>\r\n                <div>\r\n                    <h3><i className=\"fas fa-umbrella fa-lg\"></i> AccuApp</h3>\r\n                    <input type={'checkbox'} onChange={lightMode} />\r\n                </div>\r\n                <ul>\r\n                    {renderRoutes}\r\n                </ul>\r\n            </div>\r\n        </nav>\r\n    )\r\n}\r\n\r\nexport default Navbar;","import React from 'react';\r\nimport { motion } from 'framer-motion';\r\n\r\nimport './HomeScreen.css';\r\n\r\nconst HomeScreen = () => {\r\n    // Framer Motion Animation:\r\n    const pageTransition = {\r\n        in: {\r\n            opacity: 1,\r\n            x: 0\r\n        },\r\n        out: {\r\n            opacity: 0,\r\n            x: '-100vh'\r\n        }\r\n    };\r\n\r\n    return (\r\n        <motion.div exit={'out'} animate={'in'} initial={'out'} variants={pageTransition}>\r\n            <div className={'home-screen-main'}>\r\n                <h1>Weather App</h1>\r\n                <p>- Herolo project -</p>\r\n                <small>This weather app was built by using AccuWeather API and React (Inc Redux for state management, Router & Hooks).</small>\r\n                <i className=\"fas fa-cloud-moon-rain fa-3x\"></i>\r\n            </div>\r\n        </motion.div>\r\n    )\r\n}\r\n\r\nexport default HomeScreen;","export const SEARCH_RESULTS = 'SEARCH_RESULTS';\r\nexport const GET_WEATHER = 'GET_WEATHER';\r\nexport const GET_WEEK_WEATHER = 'GET_WEEK_WEATHER';\r\nexport const ADD_TO_FAVORITES = 'ADD_TO_FAVORITES';\r\nexport const REMOVE_FROM_FAVORITES = 'REMOVE_FROM_FAVORITES';\r\nexport const SET_MESSAGE = 'SET_MESSAGE';\r\nexport const REDIRECT = 'REDIRECT';","import axios from 'axios';\r\nimport { SEARCH_RESULTS,\r\nGET_WEATHER,\r\nGET_WEEK_WEATHER,\r\nADD_TO_FAVORITES,\r\nREMOVE_FROM_FAVORITES,\r\nSET_MESSAGE\r\n } from './actionTypes';\r\nconst API = 'HeIBFKnJmUovajKW8vDI6Ja7F1c80SiR';\r\n\r\nexport const getCurrentPosition = () => async dispatch => {\r\n    const successCb = async position => {\r\n        const response = await axios.get(`https://dataservice.accuweather.com/locations/v1/cities/geoposition/search?apikey=${API}&q=${position.coords.latitude}%2C${position.coords.longitude}&toplevel=true`);\r\n        \r\n        const data = {\r\n            id: Math.random(),\r\n            country: response.data.Country.LocalizedName,\r\n            city: response.data.TimeZone.Name,\r\n            text: response.data.Region.LocalizedName,\r\n            temp: 72.4,\r\n            datetime: new Date(),\r\n            key: '213225'\r\n        };\r\n\r\n        dispatch({\r\n            type: GET_WEATHER,\r\n            payload: data\r\n        })        \r\n    }\r\n    \r\n    const errorCb = error => {\r\n        console.log(error);\r\n    }\r\n    \r\n    navigator.geolocation.getCurrentPosition(successCb, errorCb);\r\n}\r\n\r\nexport const getCityCode = state => async dispatch => {\r\n    try {\r\n        const response = await axios.get(`https://dataservice.accuweather.com/locations/v1/cities/autocomplete?apikey=${API}&q=${state}`);\r\n        const results = [];\r\n        for (let i = 0; i < 5; i++) {\r\n            if (response.data[i]) {\r\n                results.push(response.data[i]);\r\n            }\r\n        }\r\n        dispatch({\r\n            type: SEARCH_RESULTS,\r\n            payload: results\r\n        });\r\n    } catch (error) {\r\n        dispatch({\r\n            type: SET_MESSAGE,\r\n            payload: error.message\r\n        })\r\n    }\r\n}\r\n\r\nexport const getCityWeather = (key, country, city) => async dispatch => {\r\n    try {\r\n        const response = await axios.get(`https://dataservice.accuweather.com/currentconditions/v1/${key}?apikey=${API}`);\r\n        const results = response.data[0];\r\n        const data = {\r\n            id: Math.random(),\r\n            country,\r\n            city,\r\n            text: results.WeatherText,\r\n            temp: results.Temperature.Imperial.Value,\r\n            datetime: new Date(results.LocalObservationDateTime),\r\n            key: key\r\n        };\r\n        dispatch({\r\n            type: GET_WEATHER,\r\n            payload: data\r\n        });\r\n    } catch (error) {\r\n        dispatch({\r\n            type: SET_MESSAGE,\r\n            payload: error.message\r\n        })\r\n    }\r\n}\r\n\r\nexport const getFiveDaysWeather = key => async dispatch => {\r\n    try {\r\n        const response = await axios.get(`https://dataservice.accuweather.com/forecasts/v1/daily/5day/${key}?apikey=${API}`)\r\n        dispatch({\r\n            type: GET_WEEK_WEATHER,\r\n            payload: response.data\r\n        })\r\n    } catch (error) {\r\n        dispatch({\r\n            type: SET_MESSAGE,\r\n            payload: error.message\r\n        })\r\n    }\r\n}\r\n\r\nexport const addToFavorites = () => (dispatch, getState) => {\r\n    const current = getState().curWeather;\r\n    const favorites = getState().favorites;\r\n\r\n    const isExist = favorites.find(element => element.city === current.city);\r\n    if (isExist) {\r\n        return dispatch({\r\n            type: SET_MESSAGE,\r\n            payload: `${isExist.city} already in your favorites`\r\n        })\r\n    }\r\n    dispatch({\r\n        type: ADD_TO_FAVORITES,\r\n        payload: current\r\n    })\r\n}\r\n\r\nexport const removeFromFavorites = city => dispatch => {\r\n    dispatch({\r\n        type: REMOVE_FROM_FAVORITES,\r\n        payload: city\r\n    })\r\n}","import React, { useState } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { getCityCode } from '../../store/actions';\r\n\r\nimport './InputSearch.css';\r\n\r\nconst InputSearch = props => {\r\n    const [searchState, setSearchState] = useState('');\r\n    const results = useSelector(state => state.inputResults);\r\n    const dispatch = useDispatch();\r\n\r\n    const updateState = event => setSearchState(event.target.value);\r\n\r\n    const getResults = event => {\r\n        event.preventDefault();\r\n        dispatch(getCityCode(searchState));\r\n        setSearchState('');\r\n    }\r\n\r\n    return (\r\n        <div className={'input-search-main'}>\r\n            <form className={'input-search-form'} onSubmit={getResults}>\r\n                <input type={'text'} \r\n                    onChange={updateState} \r\n                    value={searchState} \r\n                    placeholder={'City...'}\r\n                />\r\n                <button type={'submit'}>Search</button>\r\n            </form>\r\n            <ul>\r\n                {results.length > 0 && results.map(result => {\r\n                    return (\r\n                        <li key={result.Key} \r\n                            onClick={() => props.onWeather(result.Key, result.Country.LocalizedName, result.LocalizedName)}>\r\n                            <p>{result.LocalizedName}</p>\r\n                            <small>{result.Country.LocalizedName}</small>\r\n                        </li>\r\n                    )\r\n                })}\r\n            </ul>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default InputSearch;","import React from 'react';\r\n\r\nimport './WeatherIcon.css';\r\n\r\nconst WeatherIcon = props => {\r\n    const temp = props.temp;\r\n    const cloudShowersHeavy = <i className=\"fas fa-cloud-showers-heavy fa-3x\"></i>\r\n    const cloudSunRain = <i className={'fas fa-cloud-sun-rain fa-3x'}></i>\r\n    const cloudSun = <i className=\"fas fa-cloud-sun fa-3x\"></i>\r\n    const sun = <i className=\"fas fa-sun fa-3x\"></i>\r\n\r\n    let icon;\r\n    if (temp < 50) {\r\n        icon = cloudShowersHeavy;\r\n    } else if (temp < 61) {\r\n        icon = cloudSunRain;\r\n    } else if (temp < 75) {\r\n        icon = cloudSun;\r\n    } else {\r\n        icon = sun;\r\n    }\r\n\r\n    return (\r\n        <div className={'weather-icon-main'}>\r\n            {icon}\r\n        </div>\r\n    )\r\n}\r\nexport default WeatherIcon;","import React from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport WeatherIcon from '../WeatherIcon/WeatherIcon';\r\n\r\nimport './TempDeck.css';\r\n\r\nconst TempDeck = () => {\r\n    const weekForecasts = useSelector(state => state.weekForecasts);\r\n\r\n    return (\r\n        <div className={'tempdeck-main'}>\r\n            {weekForecasts.DailyForecasts?.length > 0 ? weekForecasts.DailyForecasts.map(forcast => {\r\n                const date = new Date(forcast.Date);\r\n                return (\r\n                    <div key={Math.random()} className={'tempdeck-main-card'}>\r\n                        <p>{date.toLocaleDateString()}</p>\r\n                        <WeatherIcon temp={forcast.Temperature.Minimum.Value}/>\r\n                        <p>{`Min ${forcast.Temperature.Minimum.Value}F - Max ${forcast.Temperature.Maximum.Value}F`}</p>\r\n                    </div>\r\n                )\r\n            }): null}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default TempDeck;","import React, { useEffect } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { getCurrentPosition, getCityWeather, getFiveDaysWeather, addToFavorites } from '../../store/actions';\r\nimport { motion } from 'framer-motion';\r\nimport InputSearch from '../../components/InputSearch/InputSearch';\r\nimport TempDeck from '../../components/TempDeck/TempDeck';\r\n\r\nimport './WeatherScreen.css';\r\n\r\nconst WeatherScreen = () => {\r\n    const weatherData = useSelector(state => state.curWeather);\r\n    const messageData = useSelector(state => state.message);\r\n    const isRedirect = useSelector(state => state.isRedirect);\r\n    const dispatch = useDispatch();\r\n\r\n    // Default Location By Geolocation API:\r\n    useEffect(() => {\r\n        if (!isRedirect) {\r\n            dispatch(getCurrentPosition());\r\n            const defaultKey = '215854';\r\n            return dispatch(getFiveDaysWeather(defaultKey));\r\n        }\r\n    }, []);\r\n\r\n    const getWeather = (key, country, city) => {\r\n        dispatch(getCityWeather(key, country, city));\r\n        dispatch(getFiveDaysWeather(key));\r\n    }\r\n\r\n    const favoriteHandler = () => {\r\n        dispatch(addToFavorites());\r\n    }\r\n\r\n    let message;\r\n    if (messageData !== '') {\r\n        message = <p className={'weather-screen-message'}>{messageData}</p>     \r\n    }\r\n\r\n    // Framer Motion Animation:\r\n    const pageTransition = {\r\n        in: {\r\n            opacity: 1,\r\n            x: 0\r\n        },\r\n        out: {\r\n            opacity: 0,\r\n            x: '-100vh'\r\n        }\r\n    };\r\n\r\n    return (\r\n        <motion.div exit={'out'} animate={'in'} initial={'out'} variants={pageTransition}>\r\n            {message}\r\n            <div className={'weather-screen-main'}>\r\n                <div className={'flex-warrper'}>\r\n                    <div>\r\n                        <h3>{weatherData?.datetime.toLocaleTimeString()}</h3>\r\n                        <i className=\"fas fa-clock fa-2x\"></i>\r\n                        <small>{weatherData?.datetime.toDateString()}</small>\r\n                    </div>\r\n                    <InputSearch onWeather={getWeather}/>\r\n                    <div>\r\n                        <h3>{weatherData?.country}</h3>\r\n                        <i onClick={favoriteHandler} className=\"fas fa-heart fa-2x\"></i>\r\n                        <small>{weatherData?.city}</small>\r\n                        <small>{weatherData?.text}</small>\r\n                        <small>Now: {weatherData?.temp}F</small>\r\n                    </div>            \r\n                </div>\r\n                <TempDeck />\r\n            </div>\r\n        </motion.div>\r\n    )\r\n}\r\n\r\nexport default WeatherScreen;","import React from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport { getCityWeather, getFiveDaysWeather, removeFromFavorites } from '../../store/actions';\r\nimport { withRouter } from 'react-router-dom';\r\nimport WeatherIcon from '../WeatherIcon/WeatherIcon';\r\n\r\nimport './Card.css';\r\n\r\nconst Card = props => {\r\n    const dispatch = useDispatch();\r\n\r\n    const removeHandler = event => {\r\n        event.stopPropagation();\r\n        dispatch(removeFromFavorites(props.city))\r\n    };\r\n\r\n    const redirect = () => {\r\n        dispatch({ type: 'REDIRECT' });\r\n        dispatch(getCityWeather(props.searchKey, props.country, props.city));\r\n        dispatch(getFiveDaysWeather(props.searchKey));\r\n        props.history.push('/weather')\r\n    }; \r\n\r\n    return (\r\n        <div onClick={redirect} className={'card-main'}>\r\n            <div className={'card-icon'}><WeatherIcon temp={props.temp}/></div>\r\n            <div className={'card-details'}>\r\n                <p>{props.country}</p>\r\n                <p>- {props.desc} -</p>\r\n                <small>{`There is ${props.temp}F in ${props.city}`}</small>\r\n                <i onClick={removeHandler} className=\"fas fa-minus-square fa-lg\"></i>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default withRouter(Card);","import React from 'react';\r\nimport './Pagination.css';\r\n\r\nconst Pagination = props => {\r\n    const pageNumbers = [];\r\n\r\n    for (let i = 1; i <= Math.ceil(props.totalForecasts.length / props.forecastPerPage); i++) {\r\n        pageNumbers.push(i);\r\n    }\r\n\r\n    const changePage = (page) => {\r\n        props.paginate(page)\r\n    }\r\n\r\n    return (\r\n        <nav>\r\n            <ul className={'pagination'}>\r\n                {pageNumbers.map(page => {\r\n                    return (\r\n                        <li key={page} onClick={() => changePage(page)}>\r\n                            <i className=\"fas fa-circle\"></i>\r\n                        </li>\r\n                    )\r\n                })}\r\n            </ul>\r\n        </nav>\r\n    )\r\n}\r\n\r\nexport default Pagination;","import React, { useState } from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport { motion } from 'framer-motion';\r\nimport Card from '../../components/Card/Card';\r\nimport Pagination from '../../utills/Pagination';\r\n\r\nimport './FavoriteScreen.css';\r\n\r\nconst FavoriteScreen = () => {\r\n    const favorites = useSelector(state => state.favorites);\r\n\r\n    // Fronted Pagination:\r\n    const [curPage, setCurPage] = useState(1);\r\n    const [forecastPerPage] = useState(6);\r\n\r\n    const indexOfLastForecast = curPage * forecastPerPage;\r\n    const indexOfFirstForecast = indexOfLastForecast - forecastPerPage;\r\n    const currentForecasts = favorites.slice(indexOfFirstForecast, indexOfLastForecast);\r\n\r\n    // Framer Motion Animation:\r\n    const pageTransition = {\r\n        in: {\r\n            opacity: 1,\r\n            x: 0\r\n        },\r\n        out: {\r\n            opacity: 0,\r\n            x: '-100vh'\r\n        }\r\n    };\r\n\r\n    return (\r\n        <motion.div exit={'out'} animate={'in'} initial={'out'} variants={pageTransition}>\r\n            <div className={'favorite-screen-main'}>\r\n                <div className={'favorite-screen-main-title'}>\r\n                    <h2>Favorite List</h2>\r\n                    <small>Keep track after your favorite areas</small>\r\n                </div>\r\n                <div className={'favorite-grid'}>\r\n                    {favorites.length > 0 ? (\r\n                        currentForecasts.map(favorite => {\r\n                            return (\r\n                                <Card key={favorite.id} \r\n                                country={favorite.country}\r\n                                city={favorite.city} \r\n                                temp={favorite.temp}\r\n                                desc={favorite.text}\r\n                                searchKey={favorite.key}\r\n                                />\r\n                            )\r\n                        })\r\n                    ) : (null)}\r\n                </div>\r\n                {favorites && <Pagination paginate={page => setCurPage(page)} totalForecasts={favorites} forecastPerPage={forecastPerPage}/>}\r\n            </div>\r\n        </motion.div>\r\n    )\r\n}\r\n\r\nexport default FavoriteScreen;","import { Route, Switch } from 'react-router-dom';\n\nimport Navbar from './components/Navbar/Navbar';\nimport HomeScreen from './containers/HomeScreen/HomeScreen';\nimport WeatherScreen from './containers/WeatherScreen/WeatherScreen';\nimport FavoriteScreen from './containers/FavoriteScreen/FavoriteScreen';\nimport './App.css';\n\nconst App = () => {\n  return (\n    <div className={'app-main'}>\n      <Navbar />\n      <main>\n        <Switch>\n          <Route path={'/'} exact component={HomeScreen}/>\n          <Route path={'/weather'} component={WeatherScreen}/>\n          <Route path={'/favorite'} component={FavoriteScreen}/>\n        </Switch>\n      </main>\n      <div className={'author'}><p>Ido Adar</p></div>\n    </div>\n  );\n}\n\nexport default App;","import { SEARCH_RESULTS,\r\nGET_WEATHER,\r\nGET_WEEK_WEATHER,\r\nADD_TO_FAVORITES,\r\nREMOVE_FROM_FAVORITES,\r\nSET_MESSAGE,\r\nREDIRECT\r\n } from './actionTypes';\r\n\r\nconst initState = {\r\n    curWeather: null,\r\n    inputResults: [],\r\n    weekForecasts: [],\r\n    favorites: [],\r\n    message: '',\r\n    isRedirect: false\r\n};\r\n\r\nconst reducer = (state = initState, action) => {\r\n    switch (action.type) {\r\n        case SEARCH_RESULTS:\r\n            return {\r\n                ...state,\r\n                inputResults: action.payload,\r\n                message: ''\r\n            }\r\n        case GET_WEATHER:\r\n            return {\r\n                ...state,\r\n                curWeather: action.payload,\r\n                inputResults: [],\r\n                message: ''\r\n            }\r\n        case GET_WEEK_WEATHER:\r\n            return {\r\n                ...state,\r\n                weekForecasts: action.payload,\r\n                message: '',\r\n                isRedirect: false\r\n            }\r\n        case ADD_TO_FAVORITES:\r\n            return {\r\n                ...state,\r\n                favorites: [ action.payload, ...state.favorites ],\r\n                message: `${action.payload.city} added to your favorites`\r\n            }\r\n        case REMOVE_FROM_FAVORITES:\r\n            return {\r\n                ...state,\r\n                favorites: state.favorites.filter(favorite => favorite.city !== action.payload)\r\n            }\r\n        case SET_MESSAGE:\r\n            return {\r\n                ...state,\r\n                message: action.payload\r\n            }\r\n        case REDIRECT:\r\n            return {\r\n                ...state,\r\n                isRedirect: true\r\n            }\r\n        default: return state;\r\n    }\r\n};\r\n\r\nexport default reducer;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\n// Router\nimport { BrowserRouter } from 'react-router-dom';\n\n// Redux\nimport { createStore, applyMiddleware, compose } from 'redux';\nimport { Provider } from 'react-redux';\nimport thunk from 'redux-thunk';\nimport reducer from './store/reducer';\n\n// Devtool\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n\nconst store = createStore(reducer, composeEnhancers(applyMiddleware(thunk)));\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <BrowserRouter>\n        <App />\n      </BrowserRouter>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}